package URBOI_PACKIN;

import URBOI_PACKIN.TaskTypes.Deadline;
import URBOI_PACKIN.TaskTypes.Event;
import URBOI_PACKIN.TaskTypes.Todo;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
import java.util.ArrayList;
import java.io.*;

public class ResponseController {
    //private static final String FILE_PATH = "src/main/java/tasks.txt";
    private static final String FILE_PATH = "tasks.txt/";

    /**
     * Process user input and generate a response.
     *
     * @param command The user's input command.
     * @return A response generated by URBOI.
     */
    public String getResponse(String command) {
        ArrayList<Task> tasks = new ArrayList<>(100);
        loadTasksFromFile(tasks);
        StringBuilder response = new StringBuilder();
        try{
            if (command.equalsIgnoreCase("bye")) {
                response.append("Bye. Hope to see you again soon!");
            } else if (command.equalsIgnoreCase("list")) {
                response.append("Here are the tasks in your list:\n");
                for (int i = 0; i < tasks.size(); i++) {
                    response.append((i + 1) + ". " + tasks.get(i) + "\n");
                }
            } else if (command.startsWith("todo")) {
                String description = command.substring(5).trim();
                if (description.isEmpty()) {
                    throw new DukeException("The description of a todo cannot be empty.");
                }
                tasks.add(new Todo(description));
                response.append("Got it. I've added this task:\n  " + tasks.get(tasks.size() - 1));
                response.append("Now you have " + tasks.size() + " tasks in the list.");
            } else if (command.startsWith("deadline")) {
                // Parse the date and time in the format d/M/yyyy HHmm
                String[] parts = command.split(" /by ");
                if (parts.length < 2) {
                    throw new DukeException("URBOI_PACKIN.TaskTypes.Deadline command must include a date.");
                }
                String description = parts[0].substring(9).trim();
                LocalDateTime dateTime = LocalDateTime.parse(parts[1], DateTimeFormatter.ofPattern("d/M/yyyy HHmm"));

                tasks.add(new Deadline(description, dateTime));
                response.append("Got it. I've added this task:\n  " + tasks.get(tasks.size() - 1));
                response.append("Now you have " + tasks.size() + " tasks in the list.");
            } else if (command.startsWith("event")) {
                String description = command.substring(6, command.indexOf("/from")).trim();
                String from = command.substring(command.indexOf("/from") + 6, command.indexOf("/to")).trim();
                String to = command.substring(command.indexOf("/to") + 4).trim();
                tasks.add(new Event(description, from, to));
                response.append("Got it. I've added this task:\n  " + tasks.get(tasks.size() - 1));
                response.append("Now you have " + tasks.size() + " tasks in the list.");
            } else if (command.startsWith("mark")) {
                int index = Integer.parseInt(command.split(" ")[1]) - 1;
                if (index >= 0 && index < tasks.size()) {
                    tasks.get(index).markDone();
                    response.append("Nice! I've marked this task as done:\n  " + tasks.get(index));
                } else {
                    response.append("Invalid task index.");
                }
            } else if (command.startsWith("unmark")) {
                int index = Integer.parseInt(command.split(" ")[1]) - 1;
                if (index >= 0 && index < tasks.size()) {
                    tasks.get(index).markNotDone();
                    response.append("OK, I've marked this task as not done yet:\n  " + tasks.get(index));
                } else {
                    response.append("Invalid task index.");
                }
            }  else if (command.startsWith("delete")) {
                int index = Integer.parseInt(command.split(" ")[1]) - 1;
                if (index >= 0 && index < tasks.size()) {
                    Task removedTask = tasks.remove(index);
                    response.append("Noted. I've removed this task:\n  " + removedTask);
                    response.append("Now you have " + tasks.size() + " tasks in the list.");
                } else {
                    response.append("Invalid task index.");
                }
            } else if (command.startsWith("find")) {
                String keyword = command.substring(5).trim();
                findTasks(tasks, keyword);
            } else {
                throw new DukeException("I'm sorry, but I don't know what that means :-(");
            }
            saveTasksToFile(tasks);
        } catch (DukeException e) {
            response.append("â˜¹ OOPS!!! " + e.getMessage());
        }
        return response.toString();
    }

    /**
     * Loads tasks from a file into the task list.
     *
     * @param tasks The ArrayList to store the loaded tasks.
     */
    private static void loadTasksFromFile(ArrayList<Task> tasks) {
        try {
            File file = new File(FILE_PATH);
            if (file.exists()) {
                Scanner fileScanner = new Scanner(file);
                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    Task task = createTaskFromLine(line);
                    if (task != null) {
                        tasks.add(task);
                    }
                }
                fileScanner.close();
            }
        } catch (FileNotFoundException e) {
            // Handle file not found exception
            System.out.println("File not found: " + FILE_PATH);
        }
    }

    /**
     * Creates a URBOI_PACKIN.Task object from a line of text in the specified format.
     *
     * @param line The line of text containing task details.
     * @return A URBOI_PACKIN.Task object representing the task described in the line, or null if parsing fails.
     */
    private static Task createTaskFromLine(String line) {
        String[] parts = line.split(" \\| ");
        if (parts.length < 3) {
            return null;
        }

        String type = parts[0];
        String status = parts[1];
        String description = parts[2];

        Task task = null;
        switch (type) {
            case "T":
                task = new Todo(description);
                break;
            case "D":
                if (parts.length >= 4) {
                    String by = parts[3];
                    task = new Deadline(description, LocalDateTime.parse(by, DateTimeFormatter.ISO_LOCAL_DATE_TIME));
                }
                break;
            case "E":
                if (parts.length >= 5) {
                    String from = parts[3];
                    String to = parts[4];
                    task = new Event(description, from, to);
                }
                break;
        }

        if (task != null) {
            if (status.equals("1")) {
                task.markDone();
            } else {
                task.markNotDone();
            }
        }

        return task;
    }

    private static void findTasks(ArrayList<Task> tasks, String keyword) {
        System.out.println("Here are the matching tasks in your list:");
        int count = 0;
        for (int i = 0; i < tasks.size(); i++) {
            Task task = tasks.get(i);
            if (task.getDescription().contains(keyword)) {
                System.out.println((count + 1) + ". " + task);
                count++;
            }
        }
        if (count == 0) {
            System.out.println("No matching tasks found.");
        }
    }

    /**
     * Save tasks to a file.
     *
     * @param tasks The ArrayList of tasks to save.
     */
    private static void saveTasksToFile(ArrayList<Task> tasks) {
        try {
            FileWriter fileWriter = new FileWriter(FILE_PATH);
            for (Task task : tasks) {
                fileWriter.write(task.toFileString() + System.lineSeparator());
            }
            fileWriter.close();
        } catch (IOException e) {
            // Handle IO exception
            System.out.println("Error saving tasks to file: " + e.getMessage());
        }
    }
}


/**
 * Custom exception class for URBOI_PACKIN.ResponseController-specific exceptions.
 */
class DukeException extends Exception {
    public DukeException(String message) {
        super(message);
    }
}